/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef IPC_MATH_add_api_PROXY_BASE_HPP_
#define IPC_MATH_add_api_PROXY_BASE_HPP_

#include <v1_0/ipc_math/add_api.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace ipc_math {

class add_apiProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const double&)> AddAsyncCallback;



    virtual void add(const double &_num1, const double &_num2, const double &_call_no, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addAsync(const double &_num1, const double &_num2, const double &_call_no, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ipc_math
} // namespace v1_0

#endif // IPC_MATH_add_api_PROXY_BASE_HPP_
