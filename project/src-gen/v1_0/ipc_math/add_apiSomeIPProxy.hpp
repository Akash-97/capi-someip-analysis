/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef IPC_MATH_ADD_API_SOMEIP_PROXY_HPP_
#define IPC_MATH_ADD_API_SOMEIP_PROXY_HPP_

#include <v1_0/ipc_math/add_apiProxyBase.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1_0 {
namespace ipc_math {

class add_apiSomeIPProxy
	: virtual public add_apiProxyBase,
	  virtual public CommonAPI::SomeIP::Proxy {
public:
    add_apiSomeIPProxy(
                    const CommonAPI::SomeIP::Address &_address,
                    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~add_apiSomeIPProxy() {
		 struct timeval tv;
		 struct tm  tm_;
		 gettimeofday(&tv,NULL);
		 tm_=*localtime(&tv.tv_sec);

			std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
	  }



    virtual void add(const double &_num1, const double &_num2, const double &_call_no, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addAsync(const double &_num1, const double &_num2, const double &_call_no, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

 private:


};

} // namespace ipc_math
} // namespace v1_0

#endif // IPC_MATH_add_api_SOMEIP_PROXY_HPP_
