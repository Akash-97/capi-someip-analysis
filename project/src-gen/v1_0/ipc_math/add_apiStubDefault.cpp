/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/ipc_math/add_apiStubDefault.hpp>
#include <assert.h>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

namespace v1_0 {
namespace ipc_math {

add_apiStubDefault::add_apiStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(add_api::getInterfaceVersion()) {
           struct timeval tv;
          struct tm  tm_;
          gettimeofday(&tv,NULL);
          tm_=*localtime(&tv.tv_sec);

             std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
}

const CommonAPI::Version& add_apiStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

      std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return interfaceVersion_;
}

add_apiStubRemoteEvent* add_apiStubDefault::initStubAdapter(const std::shared_ptr<add_apiStubAdapter> &_adapter) {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

      std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    CommonAPI::Stub<add_apiStubAdapter, add_apiStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void add_apiStubDefault::add(const std::shared_ptr<CommonAPI::ClientId> _client, double _num1, double _num2, double _call_no, addReply_t _reply) {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

      std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    double result = 0.0;
    _reply(result);
}




add_apiStubDefault::RemoteEventHandler::RemoteEventHandler(add_apiStubDefault *_defaultStub)
    :
      defaultStub_(_defaultStub) {
         struct timeval tv;
         struct tm  tm_;
         gettimeofday(&tv,NULL);
         tm_=*localtime(&tv.tv_sec);

            std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
}

} // namespace ipc_math
} // namespace v1_0
