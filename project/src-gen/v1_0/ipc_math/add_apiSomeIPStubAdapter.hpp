/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef IPC_MATH_ADD_API_SOMEIP_STUB_ADAPTER_HPP_
#define IPC_MATH_ADD_API_SOMEIP_STUB_ADAPTER_HPP_

#include <v1_0/ipc_math/add_apiStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Config.hpp>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace ipc_math {

typedef CommonAPI::SomeIP::StubAdapterHelper<add_apiStub> add_apiSomeIPStubAdapterHelper;

class add_apiSomeIPStubAdapterInternal
    : public virtual add_apiStubAdapter,
      public add_apiSomeIPStubAdapterHelper
{
public:
    add_apiSomeIPStubAdapterInternal(
            const CommonAPI::SomeIP::Address &_address,
            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~add_apiSomeIPStubAdapterInternal();




    const add_apiSomeIPStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::SomeIP::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1_0::ipc_math::add_apiStub,
        CommonAPI::Version
        > getadd_apiInterfaceVersionStubDispatcher;



static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1_0::ipc_math::add_apiStub,
    std::tuple<double, double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
> addStubDispatcher;


 private:
    add_apiSomeIPStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::SomeIP::StubAttributeTable stubAttributeTable_;
};

class add_apiSomeIPStubAdapter
    : public add_apiSomeIPStubAdapterInternal,
      public std::enable_shared_from_this<add_apiSomeIPStubAdapter> {
public:
    add_apiSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          add_apiSomeIPStubAdapterInternal(_address, _connection, _stub) {
            print_time(__FILE__, __FUNCTION__, __LINE__);
    }
};

} // namespace ipc_math
} // namespace v1_0

#endif // IPC_MATH_add_api_SOMEIP_STUB_ADAPTER_HPP_
