/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef IPC_MATH_add_api_PROXY_HPP_
#define IPC_MATH_add_api_PROXY_HPP_

#include <v1_0/ipc_math/add_apiProxyBase.hpp>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace ipc_math {

template <typename ... _AttributeExtensions>
class add_apiProxy
    : virtual public add_api,
      virtual public add_apiProxyBase,
      public _AttributeExtensions... {
public:
    add_apiProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~add_apiProxy();

    typedef add_api InterfaceType;




    /**
     * Calls add with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void add(const double &_num1, const double &_num2, const double &_call_no, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls add with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addAsync(const double &_num1, const double &_num2, const double &_call_no, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<add_apiProxyBase> delegate_;
};

typedef add_apiProxy<> add_apiProxyDefault;


//
// add_apiProxy Implementation
//
template <typename ... _AttributeExtensions>
add_apiProxy<_AttributeExtensions...>::add_apiProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<add_apiProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<add_apiProxyBase>(delegate)) {
           struct timeval tv;
           struct tm  tm_;
           gettimeofday(&tv,NULL);
           tm_=*localtime(&tv.tv_sec);


            std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";

}

template <typename ... _AttributeExtensions>
add_apiProxy<_AttributeExtensions...>::~add_apiProxy() {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
}

template <typename ... _AttributeExtensions>
void add_apiProxy<_AttributeExtensions...>::add(const double &_num1, const double &_num2, const double &_call_no, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);


   //std::cout << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"  ";
    std::cout << tm_.tm_sec << '.' << tv.tv_usec <<"  ";
    delegate_->add(_num1, _num2, _call_no, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> add_apiProxy<_AttributeExtensions...>::addAsync(const double &_num1, const double &_num2, const double &_call_no, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return delegate_->addAsync(_num1, _num2, _call_no, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &add_apiProxy<_AttributeExtensions...>::getAddress() const {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool add_apiProxy<_AttributeExtensions...>::isAvailable() const {
        struct timeval tv;
        struct tm  tm_;
        gettimeofday(&tv,NULL);
        tm_=*localtime(&tv.tv_sec);

        // commented by aananth
        //std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
        return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool add_apiProxy<_AttributeExtensions...>::isAvailableBlocking() const {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& add_apiProxy<_AttributeExtensions...>::getProxyStatusEvent() {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& add_apiProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
   struct timeval tv;
   struct tm  tm_;
   gettimeofday(&tv,NULL);
   tm_=*localtime(&tv.tv_sec);

   std::cout << "\n" << __FILE__ << "\t" << __FUNCTION__<< '\t' << __LINE__ << '\t' << tm_.tm_hour <<":"<< tm_.tm_min << ":" << tm_.tm_sec << '.' << tv.tv_usec <<"\n";
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ipc_math
} // namespace v1_0


#endif // IPC_MATH_add_api_PROXY_HPP_
