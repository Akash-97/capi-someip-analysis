/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/ipc_math/add_apiSomeIPStubAdapter.hpp>
#include <v1_0/ipc_math/add_api.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <iostream>
#include <ctime>
#include <time.h>
#include <sys/time.h>

#include "mytime.hpp"

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace ipc_math {

std::shared_ptr<CommonAPI::SomeIP::StubAdapter> createadd_apiSomeIPStubAdapter(
                   const CommonAPI::SomeIP::Address &_address,
                   const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {

    print_time(__FILE__, __FUNCTION__, __LINE__);
    return std::make_shared<add_apiSomeIPStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registeradd_apiSomeIPStubAdapter) {
    print_time(__FILE__, __FUNCTION__, __LINE__);
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
      "local:ipc_math.add_api:test",
      0x1234, 0x5678);
    CommonAPI::SomeIP::Factory::get()->registerStubAdapterCreateMethod(
      add_api::getInterface(),
      &createadd_apiSomeIPStubAdapter);
}

add_apiSomeIPStubAdapterInternal::~add_apiSomeIPStubAdapterInternal() {
    deactivateManagedInstances();
    add_apiSomeIPStubAdapterHelper::deinit();
    print_time(__FILE__, __FUNCTION__, __LINE__);
}

void add_apiSomeIPStubAdapterInternal::deactivateManagedInstances() {
   print_time(__FILE__, __FUNCTION__, __LINE__);
}

CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1_0::ipc_math::add_apiStub,
        CommonAPI::Version
        > add_apiSomeIPStubAdapterInternal::getadd_apiInterfaceVersionStubDispatcher(&add_apiStub::getInterfaceVersion);



CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1_0::ipc_math::add_apiStub,
    std::tuple<double, double, double>,
    std::tuple<double>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
> add_apiSomeIPStubAdapterInternal::addStubDispatcher(
    &add_apiStub::add,
    std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
    std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));





const add_apiSomeIPStubAdapterHelper::StubDispatcherTable& add_apiSomeIPStubAdapterInternal::getStubDispatcherTable() {
    print_time(__FILE__, __FUNCTION__, __LINE__);
    return stubDispatcherTable_;
}

const CommonAPI::SomeIP::StubAttributeTable& add_apiSomeIPStubAdapterInternal::getStubAttributeTable() {
    print_time(__FILE__, __FUNCTION__, __LINE__);
    return stubAttributeTable_;
}


add_apiSomeIPStubAdapterInternal::add_apiSomeIPStubAdapterInternal(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
    const std::shared_ptr<CommonAPI::StubBase> &_stub):
    CommonAPI::SomeIP::StubAdapter(_address, _connection),
    add_apiSomeIPStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<add_apiStub>(_stub)),
    stubDispatcherTable_({ { { 0x80e8 }, &ipc_math::add_apiSomeIPStubAdapterInternal::addStubDispatcher } } ),
    stubAttributeTable_() {
        print_time(__FILE__, __FUNCTION__, __LINE__);
}

} // namespace ipc_math
} // namespace v1_0
