        /*
        * This file was generated by the CommonAPI Generators.
        * Used org.genivi.commonapi.core 3.1.3.v201507280808.
        * Used org.franca.core 0.9.1.201412191134.
        *
        * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
        * If a copy of the MPL was not distributed with this file, You can obtain one at
        * http://mozilla.org/MPL/2.0/.
        */
        #include <v1_0/math/sum/sum_ifSomeIPProxy.hpp>
        
        #if !defined (COMMONAPI_INTERNAL_COMPILATION)
        #define COMMONAPI_INTERNAL_COMPILATION
        #endif

        #include <CommonAPI/SomeIP/AddressTranslator.hpp>
        
        #undef COMMONAPI_INTERNAL_COMPILATION

        namespace v1_0 {
        namespace math {
        namespace sum {

        std::shared_ptr<CommonAPI::SomeIP::Proxy> createsum_ifSomeIPProxy(
                            const CommonAPI::SomeIP::Address &_address,
                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
            return std::make_shared<sum_ifSomeIPProxy>(_address, _connection);
        }

        INITIALIZER(registersum_ifSomeIPProxy) {
            CommonAPI::SomeIP::AddressTranslator::get()->insert(
                "local:math.sum.sum_if:test",
                0x1234, 0x5678);
            CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
                sum_if::getInterface(),
                &createsum_ifSomeIPProxy);
        }

        sum_ifSomeIPProxy::sum_ifSomeIPProxy(
                            const CommonAPI::SomeIP::Address &_address,
                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
              : CommonAPI::SomeIP::Proxy(_address, _connection )
        {
        }



        void sum_ifSomeIPProxy::add2(const double &_num1, const double &_num2, CommonAPI::CallStatus &_internalCallStatus, double &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_num1(_num1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_num2(_num2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >
                >
            >::callMethodWithReply(
                *this,
                0x80e8,
                false,
                (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
                deploy_num1, deploy_num2,
                _internalCallStatus,
                deploy_result);
            _result = deploy_result.getValue();
        }
        std::future<CommonAPI::CallStatus> sum_ifSomeIPProxy::add2Async(const double &_num1, const double &_num2, Add2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_num1(_num1, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_num2(_num2, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            return CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        double, 
                        CommonAPI::EmptyDeployment
                    >
                >
            >::callMethodAsync(
                *this,
                0x80e8,
                false,
                (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
                deploy_num1, deploy_num2,
                [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _result) {
                	_callback(_internalCallStatus, _result.getValue());
                },
                std::make_tuple(deploy_result));
        }
        


        void sum_ifSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
            ownVersionMajor = 1;
            ownVersionMinor = 0;
        }

        } // namespace sum
        } // namespace math
        } // namespace v1_0
